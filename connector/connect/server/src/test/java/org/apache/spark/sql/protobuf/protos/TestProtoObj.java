// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

package org.apache.spark.sql.protobuf.protos;

/**
 * Protobuf type {@code org.apache.spark.sql.protobuf.protos.TestObj}
 *
 * SPARK-43646: This is generated by the `connector/connect/server/src/test/resources/test.proto`
 * to test the spark protobuf uber jar. If you need to regenerate this file:
 * 1. Modify `connector/connect/server/src/test/resources/test.proto` to generate Java files
 * and replace the current file.
 * 2. Replace all `com.google.protobuf` in the file with `org.sparkproject.spark_protobuf.protobuf.`
 * <p>
 * TODO(SPARK-44606): Generate this file and replace the package names in the file when testing.
 */
public final class TestProtoObj extends
    org.sparkproject.spark_protobuf.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:org.apache.spark.sql.protobuf.protos.TestProtoObj)
    TestProtoObjOrBuilder {
private static final long serialVersionUID = 0L;
  // Use TestProtoObj.newBuilder() to construct.
  private TestProtoObj(org.sparkproject.spark_protobuf.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private TestProtoObj() {
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new TestProtoObj();
  }

  public static final org.sparkproject.spark_protobuf.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return TestProto.internal_static_org_apache_spark_sql_protobuf_protos_TestProtoObj_descriptor;
  }

  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return TestProto.internal_static_org_apache_spark_sql_protobuf_protos_TestProtoObj_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            TestProtoObj.class, Builder.class);
  }

  public static final int V1_FIELD_NUMBER = 1;
  private long v1_ = 0L;
  /**
   * <code>int64 v1 = 1;</code>
   * @return The v1.
   */
  @Override
  public long getV1() {
    return v1_;
  }

  public static final int V2_FIELD_NUMBER = 2;
  private int v2_ = 0;
  /**
   * <code>int32 v2 = 2;</code>
   * @return The v2.
   */
  @Override
  public int getV2() {
    return v2_;
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(org.sparkproject.spark_protobuf.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (v1_ != 0L) {
      output.writeInt64(1, v1_);
    }
    if (v2_ != 0) {
      output.writeInt32(2, v2_);
    }
    getUnknownFields().writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (v1_ != 0L) {
      size += org.sparkproject.spark_protobuf.protobuf.CodedOutputStream
        .computeInt64Size(1, v1_);
    }
    if (v2_ != 0) {
      size += org.sparkproject.spark_protobuf.protobuf.CodedOutputStream
        .computeInt32Size(2, v2_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof TestProtoObj)) {
      return super.equals(obj);
    }
    TestProtoObj other = (TestProtoObj) obj;

    if (getV1()
        != other.getV1()) return false;
    if (getV2()
        != other.getV2()) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + V1_FIELD_NUMBER;
    hash = (53 * hash) + org.sparkproject.spark_protobuf.protobuf.Internal.hashLong(
        getV1());
    hash = (37 * hash) + V2_FIELD_NUMBER;
    hash = (53 * hash) + getV2();
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static TestProtoObj parseFrom(
      java.nio.ByteBuffer data)
      throws org.sparkproject.spark_protobuf.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static TestProtoObj parseFrom(
      java.nio.ByteBuffer data,
      org.sparkproject.spark_protobuf.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.sparkproject.spark_protobuf.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static TestProtoObj parseFrom(
      org.sparkproject.spark_protobuf.protobuf.ByteString data)
      throws org.sparkproject.spark_protobuf.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static TestProtoObj parseFrom(
      org.sparkproject.spark_protobuf.protobuf.ByteString data,
      org.sparkproject.spark_protobuf.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.sparkproject.spark_protobuf.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static TestProtoObj parseFrom(byte[] data)
      throws org.sparkproject.spark_protobuf.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static TestProtoObj parseFrom(
      byte[] data,
      org.sparkproject.spark_protobuf.protobuf.ExtensionRegistryLite extensionRegistry)
      throws org.sparkproject.spark_protobuf.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static TestProtoObj parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.sparkproject.spark_protobuf.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static TestProtoObj parseFrom(
      java.io.InputStream input,
      org.sparkproject.spark_protobuf.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.sparkproject.spark_protobuf.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static TestProtoObj parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return org.sparkproject.spark_protobuf.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static TestProtoObj parseDelimitedFrom(
      java.io.InputStream input,
      org.sparkproject.spark_protobuf.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.sparkproject.spark_protobuf.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static TestProtoObj parseFrom(
      org.sparkproject.spark_protobuf.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return org.sparkproject.spark_protobuf.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static TestProtoObj parseFrom(
      org.sparkproject.spark_protobuf.protobuf.CodedInputStream input,
      org.sparkproject.spark_protobuf.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return org.sparkproject.spark_protobuf.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(TestProtoObj prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code org.apache.spark.sql.protobuf.protos.TestProtoObj}
   */
  public static final class Builder extends
      org.sparkproject.spark_protobuf.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:org.apache.spark.sql.protobuf.protos.TestProtoObj)
      TestProtoObjOrBuilder {
    public static final org.sparkproject.spark_protobuf.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return TestProto.internal_static_org_apache_spark_sql_protobuf_protos_TestProtoObj_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return TestProto.internal_static_org_apache_spark_sql_protobuf_protos_TestProtoObj_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              TestProtoObj.class, Builder.class);
    }

    // Construct using org.apache.spark.sql.protobuf.protos.TestProtoObj.newBuilder()
    private Builder() {

    }

    private Builder(
        BuilderParent parent) {
      super(parent);

    }
    @Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      v1_ = 0L;
      v2_ = 0;
      return this;
    }

    @Override
    public org.sparkproject.spark_protobuf.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return TestProto.internal_static_org_apache_spark_sql_protobuf_protos_TestProtoObj_descriptor;
    }

    @Override
    public TestProtoObj getDefaultInstanceForType() {
      return TestProtoObj.getDefaultInstance();
    }

    @Override
    public TestProtoObj build() {
      TestProtoObj result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public TestProtoObj buildPartial() {
      TestProtoObj result = new TestProtoObj(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(TestProtoObj result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.v1_ = v1_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.v2_ = v2_;
      }
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        org.sparkproject.spark_protobuf.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        org.sparkproject.spark_protobuf.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        org.sparkproject.spark_protobuf.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        org.sparkproject.spark_protobuf.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        org.sparkproject.spark_protobuf.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(org.sparkproject.spark_protobuf.protobuf.Message other) {
      if (other instanceof TestProtoObj) {
        return mergeFrom((TestProtoObj)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(TestProtoObj other) {
      if (other == TestProtoObj.getDefaultInstance()) return this;
      if (other.getV1() != 0L) {
        setV1(other.getV1());
      }
      if (other.getV2() != 0) {
        setV2(other.getV2());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        org.sparkproject.spark_protobuf.protobuf.CodedInputStream input,
        org.sparkproject.spark_protobuf.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              v1_ = input.readInt64();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 16: {
              v2_ = input.readInt32();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (org.sparkproject.spark_protobuf.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private long v1_ ;
    /**
     * <code>int64 v1 = 1;</code>
     * @return The v1.
     */
    @Override
    public long getV1() {
      return v1_;
    }
    /**
     * <code>int64 v1 = 1;</code>
     * @param value The v1 to set.
     * @return This builder for chaining.
     */
    public Builder setV1(long value) {

      v1_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>int64 v1 = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearV1() {
      bitField0_ = (bitField0_ & ~0x00000001);
      v1_ = 0L;
      onChanged();
      return this;
    }

    private int v2_ ;
    /**
     * <code>int32 v2 = 2;</code>
     * @return The v2.
     */
    @Override
    public int getV2() {
      return v2_;
    }
    /**
     * <code>int32 v2 = 2;</code>
     * @param value The v2 to set.
     * @return This builder for chaining.
     */
    public Builder setV2(int value) {

      v2_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>int32 v2 = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearV2() {
      bitField0_ = (bitField0_ & ~0x00000002);
      v2_ = 0;
      onChanged();
      return this;
    }
    @Override
    public final Builder setUnknownFields(
        final org.sparkproject.spark_protobuf.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final org.sparkproject.spark_protobuf.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:org.apache.spark.sql.protobuf.protos.TestProtoObj)
  }

  // @@protoc_insertion_point(class_scope:org.apache.spark.sql.protobuf.protos.TestProtoObj)
  private static final TestProtoObj DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new TestProtoObj();
  }

  public static TestProtoObj getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final org.sparkproject.spark_protobuf.protobuf.Parser<TestProtoObj>
      PARSER = new org.sparkproject.spark_protobuf.protobuf.AbstractParser<TestProtoObj>() {
    @Override
    public TestProtoObj parsePartialFrom(
        org.sparkproject.spark_protobuf.protobuf.CodedInputStream input,
        org.sparkproject.spark_protobuf.protobuf.ExtensionRegistryLite extensionRegistry)
        throws org.sparkproject.spark_protobuf.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (org.sparkproject.spark_protobuf.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (org.sparkproject.spark_protobuf.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new org.sparkproject.spark_protobuf.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static org.sparkproject.spark_protobuf.protobuf.Parser<TestProtoObj> parser() {
    return PARSER;
  }

  @Override
  public org.sparkproject.spark_protobuf.protobuf.Parser<TestProtoObj> getParserForType() {
    return PARSER;
  }

  @Override
  public TestProtoObj getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

